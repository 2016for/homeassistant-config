
#################################################################
## Scripts
script:

  roomba_on:
    sequence:
      - service: homeassistant.turn_on
        entity_id: vacuum.roomba

  # Notify package delivered
  package_notify:
    sequence:
      - service: notify.html5
        data:
          title: 'Package Delivered - {{now().strftime("%l:%M %P")}}'
          message: 'A package has been delivered.'
          data:
            requireInteraction: true
            renotify: true
            tag: 'package_notify'
      - service: automation.trigger
        entity_id: automation.say_package_is_delivered


#################################################################
## Sensors
sensor:

  - platform: template
    sensors:
      dishwasher_status:
        value_template: '{{ states.input_select.dishwasher_status.state}}'
        friendly_name: 'Dishwasher Status'

  - platform: template
    sensors:
      roomba_status:
        value_template: '{{ states.vacuum.roomba.attributes.status}}'
        friendly_name: 'Roomba Status'


##################################################
## Inputs
input_select:

  dishwasher_status:
    initial: 'Off'
    options:
      - Running
      - Drying
      - 'Off'


#################################################################
## Automations
automation:

#Roomba logic
  # Sceduled Roobma!!
  - alias: Roomba On Weekdays

    trigger:
      - platform: time
        at: '10:00:00'

    condition:
      - condition: time
        weekday:
          - mon
          - tue
          - wed
          - thu
          - fri
      - condition: template
        value_template: '{{states.vacuum.roomba.attributes.battery_level > 79}}'
      - condition: state
        entity_id: input_boolean.vacation_mode
        state: 'off'

    action:
      - service: homeassistant.turn_on
        entity_id: vacuum.roomba

  # Notify when Roomba is stuck or stopped
  - alias: Roomba notify stuck or stopped

    trigger:
      - platform: state
        entity_id: vacuum.roomba
        to: 'off'
        for:
          minutes: 1

    condition:
      condition: or
      conditions:
        - condition: template
          value_template: '{{states.vacuum.roomba.attributes.status == "Stuck"}}'
        - condition: template
          value_template: '{{states.vacuum.roomba.attributes.status == "Stopped"}}'

    action:
      - service: notify.html5
        data:
          title: 'Roomba Error - {{now().strftime("%l:%M %P")}}'
          message: 'Schmidt is stuck or something else stopped him.'
          data:
            requireInteraction: true
            renotify: true
            tag: 'roomba_notify'

  # Notify when Roomba is finished
  - alias: Roomba notify finished

    trigger:
      - platform: state
        entity_id: sensor.roomba_status
        from: 'User Docking'
        to: 'Charging'
      - platform: state
        entity_id: sensor.roomba_status
        from: 'Docking - End Mission'
        to: 'Charging'

    action:
      - service: notify.html5
        data:
          title: 'Roomba Finished - {{now().strftime("%l:%M %P")}}'
          message: 'Schmidt is finished and bin needs emptying.'
          data:
            requireInteraction: true
            renotify: true
            tag: 'roomba_notify'

  # Notify when Roomba battery very low
  - alias: Roomba notify battery very low

    trigger:
      - platform: template
        value_template: '{{states.vacuum.roomba.attributes.battery_level < 11}}'

    action:
      - service: notify.html5
        data:
          title: 'Roomba Error - {{now().strftime("%l:%M %P")}}'
          message: 'Schmidt battery is 10%.'
          data:
            requireInteraction: true
            renotify: true
            tag: 'roomba_notify'

#Dishwasher logic
  # Dishwasher set running
  - alias: Set dishwasher active when power detected

    trigger:
      - platform: numeric_state
        entity_id: sensor.meter_outlet_power
        above: 10

    condition:
      - condition: state
        entity_id: input_select.dishwasher_status
        state: 'Off'

    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.dishwasher_status
          option: Running

  # Dishwasher set drying
  - alias: Set dishwasher drying when power drops

    trigger:
      - platform: numeric_state
        entity_id: sensor.meter_outlet_power
        below: 600
        above: 380
        for:
          minutes: 2

    condition:
      - condition: state
        entity_id: input_select.dishwasher_status
        state: Running

    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.dishwasher_status
          option: Drying

  # Dishwasher set off
  - alias: Set dishwasher off

    trigger:
      - platform: numeric_state
        entity_id: sensor.meter_outlet_power
        below: 5
        for:
          minutes: 6

    condition:
      - condition: state
        entity_id: input_select.dishwasher_status
        state: Drying

    action:
      - service: input_select.select_option
        data:
          entity_id: input_select.dishwasher_status
          option: 'Off'

  # Text and add to todo Dishwasher Alert when done
  - alias: Send text alert when dishwasher is done

    trigger:
      - platform: state
        entity_id: input_select.dishwasher_status
        to: 'Off'

    action:
      - service: notify.html5
        data:
          title: 'Dishwasher Finished - {{now().strftime("%l:%M %P")}}'
          message: 'The Dishwasher has finished and is ready to be emptied.'
          data:
            requireInteraction: true
      - service: google_keep.add_to_list
        data_template:
          title: 'Rob To Do'
          items: 'Empty Dishwasher  - {{now().strftime("%l:%M %P")}}'

  # Check for things left on
  - alias: Check for things left on

    trigger:
      - platform: state
        entity_id: binary_sensor.user1_occupancy, binary_sensor.user2_occupancy
        from: 'on'
        to: 'off'

    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.user1_occupancy
          state: 'off'
        - condition: state
          entity_id: binary_sensor.user2_occupancy
          state: 'off'
        - condition: or
          conditions:
            - condition: template
              value_template: '{{states.light.livingroom_light_level.attributes.brightness > 128}}'
            - condition: template
              value_template: '{{states.light.kitchen_light_level.attributes.brightness > 128}}'
            - condition: state
              entity_id: light.diningroom_light_level
              state: 'on'
            - condition: state
              entity_id: light.bedroom_light_level
              state: 'on'
            - condition: state
              entity_id: light.bathroom_light_level
              state: 'on'
            - condition: state
              entity_id: light.nightstand1
              state: 'on'
            - condition: state
              entity_id: light.nightstand2
              state: 'on'
            - condition: state
              entity_id: switch.bedroom_outlet_switch_3
              state: 'on'
            - condition: state
              entity_id: switch.kitchen_outlet_switch
              state: 'on'
            - condition: state
              entity_id: media_player.viziotv
              state: 'on'
            - condition: state
              entity_id: media_player.nadc338
              state: 'on'

    action:
      - service: notify.html5
        data:
          title: 'Something left on - {{now().strftime("%l:%M %P")}}'
          message: 'A light or outlet was left on.'
          data:
            requireInteraction: true
            renotify: true
            url: '/states'
            actions:
              - action: 'turn_off'
                title: 'Turn off'

# Turn off when notifcation clicked
  - alias: Turn off notifcation

    trigger:
      - platform: event
        event_type: html5_notification.clicked
        event_data:
          action: turn_off

    action:
      - service: scene.turn_on
        entity_id: scene.all_things_off

  # Say Dishwasher Alert when done
  - alias: Say alert when dishwasher is done

    trigger:
      - platform: state
        entity_id: input_select.dishwashers_status
        to: 'Off'

    condition:
      condition: and
      conditions:
        - condition: time
          after: '08:00:00'
          before: '20:00:00'
        - condition: or
          conditions:
            - condition: state
              entity_id: binary_sensor.user1_occupancy
              state: 'on'
            - condition: state
              entity_id: binary_sensor.user2_occupancy
              state: 'on'

    action:
      - service: notify.ga_broadcast
        data_template:
          message: >
            {{ [
              "The Dishwasher has finished and is ready to be emptied.",
              "The dishwasher is done, hope someone is ready to put dishes away.",
              "I have clean dishes hot off the press, the dishwasher is done."
              ] | random }}

  # Say package is delivered
  - alias: Say package is delivered

    trigger: #Dummy Trigger
      - platform: state
        entity_id: input_select.dishwasher_status
        to: 'Dead'

    condition:
      condition: and
      conditions:
        - condition: time
          after: '08:00:00'
          before: '20:00:00'
        - condition: or
          conditions:
            - condition: state
              entity_id: binary_sensor.user1_occupancy
              state: 'on'
            - condition: state
              entity_id: binary_sensor.user2_occupancy
              state: 'on'

    action:
      - service: notify.ga_broadcast
        data_template:
          message: >
            {{ [
              "A package has been delivered, hope its something good.",
              "A delivery has been made, better grab it before a porch pirate does.",
              "You can stop checking the front door, a package has been delivered."
              ] | random }}

  ## Welcome Home User1 Broadcast
  - alias: Say welcome home user1

    trigger:
      - platform: template
        value_template: '{{states.lock.front_door_handle_locked.attributes.lock_status == "Unlocked with Keypad by user 1"}}'

    condition:
      - condition: template
        value_template: "{{ (as_timestamp(now())-as_timestamp(states.binary_sensor.user1_occupancy.last_changed)) < 240 }}"
      - condition: time
        after: '10:00:00'
        before: '19:00:00'

    action:
      - delay: '00:00:05'
      - service: notify.ga_broadcast
        data_template:
          message: !secret user1_phrase

  # Espresso Notify
  - alias: Espresso Notify

    trigger:
      platform: state
      entity_id: switch.kitchen_outlet_switch
      to: 'on'
      for:
        minutes: 30

    action:
      - service: notify.html5
        data:
          title: 'Espresso Ready - {{now().strftime("%l:%M %P")}}'
          message: 'Espresso machine is warmed up.'
          data:
            requireInteraction: true
      - service: notify.ga_broadcast
        data_template:
          message: >
            {{ [
              "Hey sleepy head, the espresso machine is all warmed up.",
              "I hope there is a barista somewhere because the espresso machine is ready.",
              "Someone start grinding the beans, the expresso machine is at tempature."
              ] | random }}

  - alias: haalert

    initial_state: 'off'
    trigger:
      - platform: state
        entity_id: binary_sensor.user1_occupancy, binary_sensor.user3_occupancy, binary_sensor.user4_occupancy, binary_sensor.frontdoor_contact, binary_sensor.sidedoor_contact, binary_sensor.backdoor_contact
        from: 'off'
        to: 'on'

    action:
      - service: notify.html5
        data:
          title: 'HA Alert - {{now().strftime("%l:%M %P")}}'
          message: 'HA Alert'
          data:
            requireInteraction: true
